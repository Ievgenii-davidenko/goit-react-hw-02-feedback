{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","components/App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","key","type","name","onClick","Notification","message","App","state","handleClick","e","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAceA,EAXC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,iCACI,4BAAKD,GACJC,ICgBMC,EAnBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,oCACI,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,QCcOC,EApBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACpB,oCACKD,EAAQE,KAAI,SAAAC,GAAM,OACf,4BACIC,IAAKD,EACLE,KAAK,SACLC,KAAMH,EACNI,QAASN,GAERE,QCDFK,EARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,2BAAIA,ICuDOC,E,4MApDbC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPgB,YAAc,SAAAC,GACZ,IAAMP,EAAOO,EAAEC,OAAOR,KACtB,EAAKS,UAAS,SAAAJ,GAAK,kCACdA,GADc,kBAEhBL,EAAO,EAAKK,MAAML,GAAQ,Q,EAI/BU,mBAAqB,kBACrB,EAAKL,MAAMjB,KAAK,EAAKiB,MAAMhB,QAAQ,EAAKgB,MAAMf,K,EAE9CqB,gCAAkC,kBAChC,EAAKN,MAAMjB,KACPwB,KAAKC,MAAO,EAAKR,MAAMjB,KAAK,EAAKsB,qBAAsB,KACvD,G,uDAGI,IAAD,EACwBI,KAAKT,MAA5BjB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAASL,MAAQ,yBACf,kBAAC,EAAD,CACES,QAASqB,OAAOC,KAAKF,KAAKT,OAC1BV,gBAAiBmB,KAAKR,eAGzBQ,KAAKJ,qBACJ,kBAAC,EAAD,CAASzB,MAAQ,cACf,kBAAC,EAAD,CACAG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,KAAKJ,qBACZlB,mBAAoBsB,KAAKH,qCAIzB,kBAAC,EAAD,CAAcR,QAAQ,2B,GA7ChBc,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U","file":"static/js/main.b10f3237.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({title, children})=> (\n    <section>\n        <h2>{title}</h2>\n        {children}\n    </section>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Section;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({good, neutral, bad, total, positivePercentage})=>(\n    <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentage} %</p>\n    </>\n);\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired\n}\n\n\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({options, onLeaveFeedback})=>(\n    <>\n        {options.map(option=>(\n            <button \n                key={option} \n                type=\"button\" \n                name={option}\n                onClick={onLeaveFeedback}\n            >\n                {option}\n            </button>\n        ))}\n    </>\n);\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired\n};\n\nexport default FeedbackOptions;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message})=>(\n    <p>{message}</p>\n);\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n};\n\nexport default Notification;","import React, { Component } from 'react';\nimport Section from './Section';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Notification from './Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  handleClick = e => {\n    const name = e.target.name;\n    this.setState(state => ({\n      ...state,\n      [name]: this.state[name] + 1\n    }));\n  };\n\n  countTotalFeedback = ()=>\n  this.state.good+this.state.neutral+this.state.bad;\n\n  countPositiveFeedbackPercentage = ()=>\n    this.state.good\n      ? Math.round((this.state.good/this.countTotalFeedback())*100)\n      : 0;\n \n  \n  render (){\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title = 'Please leave feedback'>\n          <FeedbackOptions \n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title = 'Statistics'>\n            <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n          ) : (\n            <Notification message=\"No feedback given\"/>\n          )\n        }\n      </>\n    );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n \nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}